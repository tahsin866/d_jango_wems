"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-6+)cck_0rf1*r$s^hffjt@r)u7gd9u#)*3kx7_nsaznkrj)w)*')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',') if os.getenv('ALLOWED_HOSTS') else []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'apps.users',
    'apps.school',
    'apps.admin.subject',  # New subject app
    'apps.admin.CentralExam',  # Central Exam app
    'apps.Markaz',  # Markaz app added
    'apps.registration.overview',  # Registration Overview app
    'apps.registration.OldStudent',  # OldStudent app for unmanaged models
    'apps.admin.madrasha.apps.MadrashaConfig',  # Madrasha app for Division/District/Thana models
    'apps.admin.department.apps.DepartmentConfig',  # Department management app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'config.middleware.SecureJWTAuthMiddleware',  # Enhanced secure middleware
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Support for Docker environment variables
DATABASE_URL = os.getenv('DATABASE_URL')
if DATABASE_URL:
    # Parse postgresql://user:password@host:port/dbname format
    import urllib.parse as urlparse
    url = urlparse.urlparse(DATABASE_URL)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': url.path[1:],  # Remove leading slash
            'USER': url.username,
            'PASSWORD': url.password,
            'HOST': url.hostname,
            'PORT': url.port,
            'OPTIONS': {
                'connect_timeout': 10,
            },
            'CONN_MAX_AGE': 60,
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME', 'wifaq'),
            'USER': os.getenv('DB_USER', 'postgres'),
            'PASSWORD': os.getenv('DB_PASSWORD', '12345678'),
            'HOST': os.getenv('DB_HOST', 'localhost'),
            'PORT': os.getenv('DB_PORT', '5432'),
            'OPTIONS': {
                'connect_timeout': 10,  # Connection timeout in seconds
            },
            'CONN_MAX_AGE': 60,  # Connection reuse for 60 seconds
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Cache configuration - Use memory cache for now, can be easily switched to Redis later
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'wems-cache',
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        },
        'TIMEOUT': 300,  # 5 minutes default timeout
        'KEY_PREFIX': 'wems',  # Prefix for all cache keys
        'VERSION': 1,
    },
    'sessions': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'wems-sessions',
        'TIMEOUT': 1800,  # 30 minutes for sessions
        'KEY_PREFIX': 'wems_session',
    }
}

# Redis configuration - Uncomment when Redis is properly installed and running
# To enable Redis cache, comment out the CACHES configuration above and uncomment this one:
#
# CACHES = {
#     'default': {
#         'BACKEND': 'django_redis.cache.RedisCache',
#         'LOCATION': 'redis://127.0.0.1:6379/1',
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#             'CONNECTION_POOL_KWARGS': {
#                 'max_connections': 50,
#                 'retry_on_timeout': True,
#             },
#             'SERIALIZER': 'django_redis.serializers.json.JSONSerializer',
#         },
#         'TIMEOUT': 300,  # 5 minutes default timeout
#         'KEY_PREFIX': 'wems',
#         'VERSION': 1,
#     },
#     'sessions': {
#         'BACKEND': 'django_redis.cache.RedisCache',
#         'LOCATION': 'redis://127.0.0.1:6379/2',
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#         },
#         'TIMEOUT': 1800,  # 30 minutes for sessions
#         'KEY_PREFIX': 'wems_session',
#     }
# }

AUTH_USER_MODEL = 'users.User'  # যদি আপনার model এর নাম User হয় এবং app 'users'

# Session configuration for better performance with Redis
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'sessions'
SESSION_COOKIE_AGE = 1800  # 30 minutes
SESSION_COOKIE_HTTPONLY = False  # Allow frontend to access session
SESSION_COOKIE_SAMESITE = None  # For cross-origin requests
SESSION_COOKIE_SECURE = False  # Only True in HTTPS production
SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_NAME = 'sessionid'
SESSION_COOKIE_DOMAIN = None

# Custom authentication backend
AUTHENTICATION_BACKENDS = [
    'config.auth_backend.EmailOrPhoneBackend',
    'django.contrib.auth.backends.ModelBackend',
]

# REST Framework configuration
# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': [
#         'rest_framework.authentication.SessionAuthentication',
#     ],
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.IsAuthenticated',
#     ],
# }
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        # যদি JWT ব্যবহার করেন:
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}



# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://localhost:8080",
    "http://127.0.0.1:8080",
]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = False  # Set to False for security, use specific origins
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# CSRF settings for frontend integration
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]
CSRF_COOKIE_HTTPONLY = False  # Allow frontend to access CSRF token
CSRF_COOKIE_SAMESITE = None   # For cross-origin requests
CSRF_COOKIE_SECURE = False    # Only True in HTTPS production

# Media files (uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Cache timeout settings (in seconds)
CACHE_TIMEOUT_SHORT = 300       # 5 minutes
CACHE_TIMEOUT_MEDIUM = 900      # 15 minutes  
CACHE_TIMEOUT_LONG = 3600       # 1 hour
CACHE_TIMEOUT_VERY_LONG = 86400 # 24 hours

# Cache key prefixes
CACHE_KEY_PREFIX = 'wems'
CACHE_MARHALA_LIST = f'{CACHE_KEY_PREFIX}:marhala:list'
CACHE_SUBJECT_LIST = f'{CACHE_KEY_PREFIX}:subject:list'
CACHE_SUBJECT_SETTINGS = f'{CACHE_KEY_PREFIX}:subject:settings'
# Madrasha cache keys
CACHE_MADRASHA_LIST = f'{CACHE_KEY_PREFIX}:madrasha:list'
CACHE_MADRASHA_COUNT = f'{CACHE_KEY_PREFIX}:madrasha:count'
CACHE_MADRASHA_PAGE = f'{CACHE_KEY_PREFIX}:madrasha:page'

# Markaz Cache Keys
CACHE_MARKAZ_LIST = f'{CACHE_KEY_PREFIX}:markaz:list'
CACHE_MARKAZ_COUNT = f'{CACHE_KEY_PREFIX}:markaz:count'
CACHE_MARKAZ_PAGE = f'{CACHE_KEY_PREFIX}:markaz:page'

# Redis URL configuration
REDIS_URL = os.getenv('REDIS_URL', "redis://localhost:6379/0")