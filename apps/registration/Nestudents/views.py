from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.permissions import AllowAny
from django.utils import timezone
from django.core.cache import cache
from apps.registration.OldStudent.models import student_basic, student_adresss, student_attachment
from apps.users.models import UserInformation
from apps.school.models import School
from apps.registration.board.models import Board
from .serializers import NewStudentSerializer
import random

BEFAQ_BOARD_NAME = '‡¶¨‡ßá‡¶´‡¶æ‡¶ï‡ßÅ‡¶≤ ‡¶Æ‡¶æ‡¶¶‡¶æ‡¶∞‡¶ø‡¶∏‡¶ø‡¶≤ ‡¶Ü‡¶∞‡¶æ‡¶¨‡¶ø‡¶Ø‡¶º‡¶æ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂'

class NewStudentRegistrationView(APIView):
    permission_classes = [AllowAny]
    authentication_classes = []

    def get_user_madrasha_id(self, user_id):
        """user_information ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶•‡ßá‡¶ï‡ßá user_id ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá madrasha_id ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ"""
        try:
            user_info = UserInformation.objects.get(user_id=user_id)
            return user_info.madrasha_id
        except UserInformation.DoesNotExist:
            return None
        except Exception as e:
            print(f"‚ùå user madrasha_id ‡¶™‡ßá‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
            return None

    def get_auto_markaz_id(self, madrasha_id):
        """madrasha_under_centers ‡¶•‡ßá‡¶ï‡ßá markaz_id ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£"""
        try:
            from apps.Markaz.models import MadrashaUnderCenter
            mapping = MadrashaUnderCenter.objects.filter(child_madrasha_id=str(madrasha_id)).first()
            if mapping and mapping.parent_madrasha_id:
                auto_markaz_id = int(mapping.parent_madrasha_id) if str(mapping.parent_madrasha_id).isdigit() else None
                print(f"‚úÖ ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º markaz_id: {auto_markaz_id}")
                return auto_markaz_id
            else:
                print(f"‚ö†Ô∏è madrasha_id {madrasha_id} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã markaz mapping ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
                return None
        except Exception as e:
            print(f"‚ùå markaz_id ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
            return None

    def get_auto_exam_id(self):
        """ExamSetup ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡¶õ‡¶∞‡ßá‡¶∞ exam_id ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ"""
        try:
            from apps.admin.CentralExam.models import ExamSetup
            current_year = timezone.now().year

            # ‡¶ï‡ßå‡¶∂‡¶≤ ‡ßß: ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡¶õ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Æ‡¶ø‡¶≤
            exam_setup = ExamSetup.objects.filter(
                english_year=str(current_year)
            ).first()

            # ‡¶ï‡ßå‡¶∂‡¶≤ ‡ß®: ‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Æ‡¶ø‡¶≤ ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º, contains ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
            if not exam_setup:
                exam_setup = ExamSetup.objects.filter(
                    english_year__contains=str(current_year)
                ).first()

            # ‡¶ï‡ßå‡¶∂‡¶≤ ‡ß©: ‡¶è‡¶ñ‡¶®‡¶ì ‡¶Ø‡¶¶‡¶ø ‡¶Æ‡¶ø‡¶≤ ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º, ‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑‡¶ü‡¶ø ‡¶®‡¶ø‡¶®
            if not exam_setup:
                exam_setup = ExamSetup.objects.order_by('-created_at').first()

            exam_id = exam_setup.id if exam_setup else None
            print(f"‚úÖ ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º exam_id: {exam_id}")
            return exam_id
        except Exception as e:
            print(f"‚ùå exam_id ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
            return None

    def get_marhala_id_from_header(self, request):
        """
        ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá marhala_id ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø
        ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßá:
        1. HTTP_X_MARHALA_ID (Django META format)
        2. X-Marhala-ID (Standard header format)
        """
        try:
            # ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá Django META ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
            marhala_id = request.META.get('HTTP_X_MARHALA_ID')
            
            # ‡¶Ø‡¶¶‡¶ø ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶æ‡¶∞‡ßç‡¶° ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
            if not marhala_id:
                marhala_id = request.headers.get('X-Marhala-ID')
            
            # ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ñ‡¶®‡¶ì ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º, case-insensitive ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
            if not marhala_id:
                # ‡¶∏‡¶¨ ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
                for header_name, header_value in request.headers.items():
                    if header_name.lower() == 'x-marhala-id':
                        marhala_id = header_value
                        break
            
            if not marhala_id:
                print(f"‚ö†Ô∏è ‡¶π‡ßá‡¶°‡¶æ‡¶∞‡ßá marhala_id ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
                print(f"üìã ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶π‡ßá‡¶°‡¶æ‡¶∞: {dict(request.headers)}")
                return None
                
            print(f"‚úÖ ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá marhala_id ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá: {marhala_id}")
            
            # ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶ø‡¶®‡¶æ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®
            if str(marhala_id).isdigit():
                return int(marhala_id)
            else:
                print(f"‚ö†Ô∏è marhala_id ‡¶¨‡ßà‡¶ß ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶®‡¶Ø‡¶º: {marhala_id}")
                return None
                
        except Exception as e:
            print(f"‚ùå ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá marhala_id ‡¶™‡ßá‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
            return None

    def get_cid_from_marhala_id(self, marhala_id):
        """marhala_id ‡¶•‡ßá‡¶ï‡ßá cid ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£‡ßá‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï"""
        try:
            if not marhala_id:
                print(f"‚ö†Ô∏è cid ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø marhala_id ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø")
                return None

            marhala_id = int(marhala_id)
            
            # marhala_id ‚Üí cid ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™‡¶ø‡¶Ç ‡¶≤‡¶ú‡¶ø‡¶ï
            cid_mapping = {
                9: 2,   # ‡¶¶‡¶æ‡¶ñ‡¶ø‡¶≤ ‡ßØ‡¶Æ ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡ßÄ
                10: 3,  # ‡¶¶‡¶æ‡¶ñ‡¶ø‡¶≤ ‡ßß‡ß¶‡¶Æ ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡ßÄ
                11: 4,  # ‡¶Ü‡¶≤‡¶ø‡¶Æ ‡ßß‡¶Æ ‡¶¨‡¶∞‡ßç‡¶∑
                12: 5,  # ‡¶Ü‡¶≤‡¶ø‡¶Æ ‡ß®‡¶Ø‡¶º ‡¶¨‡¶∞‡ßç‡¶∑
                14: 6,  # ‡¶´‡¶æ‡¶ú‡¶ø‡¶≤ ‡ßß‡¶Æ ‡¶¨‡¶∞‡ßç‡¶∑
                15: 7,
                 16: 8,  # ‡¶´‡¶æ‡¶ú‡¶ø‡¶≤ ‡ß®‡¶Ø‡¶º ‡¶¨‡¶∞‡ßç‡¶∑
            }
            
            cid = cid_mapping.get(marhala_id)
            
            if cid:
                print(f"‚úÖ marhala_id {marhala_id} ‚Üí cid {cid}")
                return cid
            else:
                print(f"‚ö†Ô∏è marhala_id {marhala_id} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã cid ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™‡¶ø‡¶Ç ‡¶®‡ßá‡¶á")
                return None
                
        except Exception as e:
            print(f"‚ùå marhala_id ‡¶•‡ßá‡¶ï‡ßá cid ‡¶™‡ßá‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
            return None

    def get_srtype_from_user_madrasha(self, user_id):
        """user_information.madrasha_id ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá schools ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶•‡ßá‡¶ï‡ßá srtype (mtype) ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ"""
        try:
            # ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá user_information ‡¶•‡ßá‡¶ï‡ßá madrasha_id ‡¶™‡¶æ‡¶®
            user_info = UserInformation.objects.get(user_id=user_id)
            madrasha_id = user_info.madrasha_id

            if madrasha_id:
                # ‡¶è‡¶ñ‡¶® madrasha_id ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá school ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶™‡¶æ‡¶®
                school = School.objects.filter(madrasha_id=madrasha_id).first()
                if school:
                    srtype = school.mtype
                    print(f"‚úÖ schools ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶•‡ßá‡¶ï‡ßá srtype (mtype): {srtype}")
                    return srtype
                else:
                    print(f"‚ö†Ô∏è madrasha_id {madrasha_id} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã school ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
                    return None
            else:
                print(f"‚ö†Ô∏è user_id {user_id} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø madrasha_id ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
                return None
        except UserInformation.DoesNotExist:
            print(f"‚ö†Ô∏è user_id {user_id} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø UserInformation ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
            return None
        except Exception as e:
            print(f"‚ùå user madrasha ‡¶•‡ßá‡¶ï‡ßá srtype ‡¶™‡ßá‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
            return None

    def get_board_id_from_board_table(self, board_name):
        """board ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶•‡ßá‡¶ï‡ßá board_id ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ"""
        try:
            if not board_name:
                print(f"‚ö†Ô∏è board_name ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø")
                return None
                
            print(f"üîç board_name ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá: '{board_name}'")
            
            # ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Æ‡¶ø‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
            board = Board.objects.filter(board_name=board_name).first()
            if board:
                board_id = board.id
                print(f"‚úÖ board ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶•‡ßá‡¶ï‡ßá board_id: {board_id}")
                return board_id
            
            # case-insensitive ‡¶Æ‡¶ø‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
            board = Board.objects.filter(board_name__iexact=board_name).first()
            if board:
                board_id = board.id
                print(f"‚úÖ board ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶•‡ßá‡¶ï‡ßá board_id (case-insensitive): {board_id}")
                return board_id
            
            # contains ‡¶Æ‡¶ø‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
            board = Board.objects.filter(board_name__icontains=board_name).first()
            if board:
                board_id = board.id
                print(f"‚úÖ board ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶•‡ßá‡¶ï‡ßá board_id (contains): {board_id}")
                return board_id
            
            print(f"‚ö†Ô∏è '{board_name}' ‡¶®‡¶æ‡¶Æ‡ßá ‡¶ï‡ßã‡¶®‡ßã board ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
            return None
            
        except Exception as e:
            print(f"‚ùå board ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶•‡ßá‡¶ï‡ßá board_id ‡¶™‡ßá‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
            return None

    def post(self, request):
        print("üöÄ ‡¶®‡¶§‡ßÅ‡¶® ‡¶õ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® API ‡¶ï‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
        print(f"üìã ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶π‡ßá‡¶°‡¶æ‡¶∞: {dict(request.headers)}")
        print(f"üìã ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶°‡ßá‡¶ü‡¶æ ‡¶ï‡ßÄ: {list(request.data.keys())}")

        serializer = NewStudentSerializer(data=request.data)
        if not serializer.is_valid():
            print(f"‚ùå ‡¶∏‡¶ø‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {serializer.errors}")
            return Response({'errors': serializer.errors}, status=status.HTTP_400_BAD_REQUEST)
        
        data = serializer.validated_data
        print(f"‚úÖ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶ü‡ßá‡¶° ‡¶°‡ßá‡¶ü‡¶æ: {data}")

        # ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá user_id ‡¶™‡¶æ‡¶®
        user_id = (request.data.get('user_id') or 
                  request.data.get('user') or 
                  (request.user.id if hasattr(request, 'user') and request.user.is_authenticated else None))
        print(f"üë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ID: {user_id}")

        # ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá madrasha_id ‡¶è‡¶¨‡¶Ç markaz_id ‡¶°‡¶ø‡¶ü‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
        user_madrasha_id = None
        auto_markaz_id = None
        auto_exam_id = None

        if user_id:
            user_madrasha_id = self.get_user_madrasha_id(user_id)
            if user_madrasha_id:
                print(f"‚úÖ user_information ‡¶•‡ßá‡¶ï‡ßá madrasha_id: {user_madrasha_id}")
                auto_markaz_id = self.get_auto_markaz_id(user_madrasha_id)
            else:
                print(f"‚ö†Ô∏è user_id {user_id} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø madrasha_id ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
                # ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶´‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ
                user_madrasha_id = 1
                auto_markaz_id = 1
        else:
            print("‚ö†Ô∏è ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü‡ßá user_id ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø - ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá")
            user_madrasha_id = 1
            auto_markaz_id = 1

        # ExamSetup ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º exam_id ‡¶°‡¶ø‡¶ü‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
        auto_exam_id = self.get_auto_exam_id()

        # ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶´‡¶ø‡¶≤‡ßç‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
        # ‡ßß. marhala_id -> ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶æ‡¶®
        header_marhala_id = self.get_marhala_id_from_header(request)
        final_marhala_id = header_marhala_id or data.get('marhala_id')
        print(f"üéØ ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ marhala_id: {final_marhala_id} (‡¶π‡ßá‡¶°‡¶æ‡¶∞: {header_marhala_id}, ‡¶´‡¶∞‡ßç‡¶Æ: {data.get('marhala_id')})")

        # ‡ß®. cid -> marhala_id ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï
        marhala_cid = self.get_cid_from_marhala_id(final_marhala_id)
        final_cid = marhala_cid or data.get('cid')
        print(f"üéØ ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ cid: {final_cid} (marhala_id ‡¶•‡ßá‡¶ï‡ßá: {marhala_cid}, ‡¶´‡¶∞‡ßç‡¶Æ: {data.get('cid')})")

        # ‡ß©. srtype -> user_information.madrasha_id ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá schools ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶•‡ßá‡¶ï‡ßá mtype ‡¶™‡¶æ‡¶®
        if user_id:
            header_srtype = self.get_srtype_from_user_madrasha(user_id)
            final_srtype = header_srtype or data.get('srtype')
            print(f"üéØ ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ srtype: {final_srtype} (‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶¶‡ßç‡¶∞‡¶æ‡¶∏‡¶æ ‡¶•‡ßá‡¶ï‡ßá: {header_srtype}, ‡¶´‡¶∞‡ßç‡¶Æ: {data.get('srtype')})")
        else:
            final_srtype = data.get('srtype')
            print(f"üéØ ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ srtype: {final_srtype} (user_id ‡¶®‡ßá‡¶á, ‡¶´‡¶∞‡ßç‡¶Æ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá)")

        # ‡ß™. board_id -> board_name ‡¶•‡¶æ‡¶ï‡¶≤‡ßá board ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶æ‡¶®
        board_name = data.get('board_name')
        print(f"üîç ‡¶´‡¶∞‡ßç‡¶Æ ‡¶•‡ßá‡¶ï‡ßá board_name: '{board_name}'")
        print(f"üîç ‡¶´‡¶∞‡ßç‡¶Æ ‡¶•‡ßá‡¶ï‡ßá board_id: '{data.get('board_id')}'")

        if board_name:
            table_board_id = self.get_board_id_from_board_table(board_name)
            final_board_id = table_board_id or data.get('board_id')
            print(f"üéØ ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ board_id: {final_board_id} (‡¶ü‡ßá‡¶¨‡¶ø‡¶≤: {table_board_id}, ‡¶´‡¶∞‡ßç‡¶Æ: {data.get('board_id')})")
        else:
            # ‡¶´‡¶∞‡ßç‡¶Æ ‡¶•‡ßá‡¶ï‡ßá board_id ‡¶™‡ßá‡¶≤‡ßá ‡¶ï‡ßç‡¶∞‡¶∏-‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶ï‡¶∞‡ßÅ‡¶®
            form_board_id = data.get('board_id')
            if form_board_id:
                print(f"üîç ‡¶´‡¶∞‡ßç‡¶Æ board_id ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá board ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá: {form_board_id}")
                try:
                    board = Board.objects.filter(id=form_board_id).first()
                    if board:
                        print(f"‚úÖ ID {form_board_id} ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá board ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá: '{board.board_name}'")
                        final_board_id = form_board_id
                    else:
                        print(f"‚ö†Ô∏è ID {form_board_id} ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ï‡ßã‡¶®‡ßã board ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
                        final_board_id = form_board_id
                except Exception as e:
                    print(f"‚ùå ID ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá board ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
                    final_board_id = form_board_id
            else:
                final_board_id = None
                print(f"üéØ ‡¶ï‡ßã‡¶®‡ßã board_id ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡ßá‡¶á")
            print(f"üéØ ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ board_id: {final_board_id}")

        # students_type ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£
        board_id_for_logic = final_board_id
        irregular_year = data.get('irregular_year')

        print(f"üìä Board ‡¶°‡ßá‡¶ü‡¶æ:")
        print(f"  board_id: {board_id_for_logic}")
        print(f"  irregular_year: {irregular_year}")

        # ‡¶≤‡¶ú‡¶ø‡¶ï: board_id 1 (‡¶Æ‡ßÇ‡¶≤ ‡¶¨‡ßá‡¶´‡¶æ‡¶ï) ‡¶®‡¶æ ‡¶π‡¶≤‡ßá students_type = '‡¶Ö‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ (‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø)' ‡¶Ö‡¶®‡ßç‡¶Ø‡¶•‡¶æ‡¶Ø‡¶º '‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§'
        if board_id_for_logic and board_id_for_logic != 1:
            students_type_val = '‡¶Ö‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ (‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø)'
        else:
            students_type_val = '‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§'

        # reg_no ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® (YY + 4 ‡¶∞‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ)
        year_last2 = str(timezone.now().year)[-2:]
        reg_no = int(f"{year_last2}{random.randint(1000,9999)}")

        try:
            # irregular_sub ‡¶®‡¶ø‡¶â‡¶Æ‡ßá‡¶∞‡¶ø‡¶ï ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®
            try:
                irregular_sub_val = int(data.get('irregular_sub')) if data.get('irregular_sub') not in [None, ''] else 0
            except Exception:
                irregular_sub_val = 0

            basic = student_basic.objects.create(
                student_name_bn=data.get('student_name_bn',''),
                student_name_ar=data.get('student_name_ar',''),
                student_name_en=data.get('student_name_en',''),
                father_name_bn=data.get('father_name_bn',''),
                father_name_ar=data.get('father_name_ar',''),
                father_name_en=data.get('father_name_en',''),
                mother_name_bn=data.get('mother_name_bn',''),
                mother_name_ar=data.get('mother_name_ar',''),
                mother_name_en=data.get('mother_name_en',''),
                date_of_birth=data.get('date_of_birth'),
                roll_no=0,
                reg_no=reg_no,
                year=timezone.now().year,
                status='pending',
                students_type=students_type_val,
                exam_id=auto_exam_id,
                mobile=data.get('mobile',''),
                # ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶´‡¶ø‡¶≤‡ßç‡¶°
                marhala_id=final_marhala_id,
                cid=final_cid,
                srtype=final_srtype,
                # ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶ø‡¶ü‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶´‡¶ø‡¶≤‡ßç‡¶°
                madrasha_id=user_madrasha_id,
                markaz_id=auto_markaz_id,
                # ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡¶ø‡¶≤‡ßç‡¶°
                board_id=final_board_id,
                irregular_year=irregular_year or '',
                irregular_sub=irregular_sub_val,
                ip_address=request.META.get('REMOTE_ADDR','127.0.0.1'),
                created_at=timezone.now(),
                updated_at=timezone.now(),
                is_old=0,
            )
        except Exception as e:
            return Response({
                'error':'student_basic ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá',
                'details':str(e)
            }, status=500)

        # ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ
        try:
            print(f"üè† ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶°‡ßá‡¶ü‡¶æ:")
            print(f"  division_id: {data.get('division_id','')}")
            print(f"  district_id: {data.get('district_id','')}")
            print(f"  thana_id: {data.get('thana_id','')}")
            
            student_adresss.objects.update_or_create(
                id=basic.id,
                defaults={
                    'student_id': basic.id,
                    'division': data.get('division_id',''),
                    'district': data.get('district_id',''),
                    'thana': data.get('thana_id',''),
                    'post_office': '',
                    'passport_photo': data.get('passport_photo',''),
                    'birth_certificate_no': data.get('birth_no',''),
                    'birth_certificate_photo': data.get('birth_attach',''),
                    'nid_no': data.get('nid_no',''),
                    'nid_photo': data.get('nid_attach',''),
                }
            )
            print(f"‚úÖ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶§‡ßà‡¶∞‡¶ø/‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
        except Exception as e:
            print(f"‚ùå ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶§‡ßà‡¶∞‡¶ø‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
            pass

        # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ö‡¶Æ‡ßá‡¶®‡ßç‡¶ü
        try:
            student_image_file = data.get('student_image')
            marksheet_file = data.get('marksheet')
            
            attachment_data = {
                'student_id': basic.id,
                'birth_no': data.get('birth_no',''),
                'birth_attach': data.get('birth_attach',''),
                'nid_no': data.get('nid_no',''),
                'nid_attach': data.get('nid_attach',''),
                'marksheet': marksheet_file.name if marksheet_file and hasattr(marksheet_file, 'name') else '',
            }
            
            student_attachment.objects.update_or_create(
                id=basic.id,
                defaults=attachment_data
            )
        except Exception as e:
            print(f"‚ùå ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ö‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
            pass

        return Response({
            'success': True,
            'message': '‡¶õ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá',
            'student_id': basic.id,
            'reg_no': reg_no,
            'students_type': students_type_val,
            'board_id_saved': final_board_id,
            'irregular_year_saved': irregular_year,
            'madrasha_id': user_madrasha_id,
            'markaz_id': auto_markaz_id,
            'exam_id': auto_exam_id,
            'user_id_used': user_id,
            # ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç‡¶Ø‡¶º‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ
            'marhala_id_saved': final_marhala_id,
            'cid_saved': final_cid,
            'srtype_saved': final_srtype,
            'header_marhala_id': header_marhala_id,
            'marhala_cid': marhala_cid,
            'header_srtype': header_srtype if user_id else None,
            'table_board_id': self.get_board_id_from_board_table(board_name) if board_name else None,
        }, status=201)